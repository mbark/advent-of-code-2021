package main

import (
	"fmt"
	"github.com/mbark/advent-of-code-2021/maps"
	"github.com/mbark/advent-of-code-2021/util"
	"strings"
)

const (
	testData = `
--- scanner 0 ---
404,-588,-901
528,-643,409
-838,591,734
390,-675,-793
-537,-823,-458
-485,-357,347
-345,-311,381
-661,-816,-575
-876,649,763
-618,-824,-621
553,345,-567
474,580,667
-447,-329,318
-584,868,-557
544,-627,-890
564,392,-477
455,729,728
-892,524,684
-689,845,-530
423,-701,434
7,-33,-71
630,319,-379
443,580,662
-789,900,-551
459,-707,401

--- scanner 1 ---
686,422,578
605,423,415
515,917,-361
-336,658,858
95,138,22
-476,619,847
-340,-569,-846
567,-361,727
-460,603,-452
669,-402,600
729,430,532
-500,-761,534
-322,571,750
-466,-666,-811
-429,-592,574
-355,545,-477
703,-491,-529
-328,-685,520
413,935,-424
-391,539,-444
586,-435,557
-364,-763,-893
807,-499,-711
755,-354,-619
553,889,-390

--- scanner 2 ---
649,640,665
682,-795,504
-784,533,-524
-644,584,-595
-588,-843,648
-30,6,44
-674,560,763
500,723,-460
609,671,-379
-555,-800,653
-675,-892,-343
697,-426,-610
578,704,681
493,664,-388
-671,-858,530
-667,343,800
571,-461,-707
-138,-166,112
-889,563,-600
646,-828,498
640,759,510
-630,509,768
-681,-892,-333
673,-379,-804
-742,-814,-386
577,-820,562

--- scanner 3 ---
-589,542,597
605,-692,669
-500,565,-823
-660,373,557
-458,-679,-417
-488,449,543
-626,468,-788
338,-750,-386
528,-832,-391
562,-778,733
-938,-730,414
543,643,-506
-524,371,-870
407,773,750
-104,29,83
378,-903,-323
-778,-728,485
426,699,580
-438,-605,-362
-469,-447,-387
509,732,623
647,635,-688
-868,-804,481
614,-800,639
595,780,-596

--- scanner 4 ---
727,592,562
-293,-554,779
441,611,-461
-714,465,-776
-743,427,-804
-660,-479,-426
832,-632,460
927,-485,-438
408,393,-506
466,436,-512
110,16,151
-258,-428,682
-393,719,612
-211,-452,876
808,-476,-593
-575,615,604
-485,667,467
-680,325,-822
-627,-443,-432
872,-547,-609
833,512,582
807,604,487
839,-516,451
891,-625,532
-652,-548,-490
30,-46,-14
`

	in = `
--- scanner 0 ---
518,548,922
-463,418,-234
-47,92,75
484,596,950
-668,-439,-315
-311,509,-258
695,613,911
-693,696,407
824,-523,-400
526,863,-346
835,-582,-299
732,-620,-401
-776,-340,558
-629,763,528
-769,-490,-378
-729,-489,647
625,941,-377
740,-394,655
-826,-336,619
-390,509,-275
578,-285,669
-559,-474,-447
-584,737,551
509,-368,635
649,903,-479

--- scanner 1 ---
672,-406,817
477,386,765
-493,-498,726
643,-513,756
-413,-474,838
407,352,716
97,6,45
-519,364,-714
-625,492,433
537,-664,-373
604,622,-584
-404,-432,718
-492,260,-793
683,670,-638
-567,-628,-604
577,-696,-393
-564,469,564
132,-157,-89
-598,471,677
-659,-673,-606
441,489,841
587,-444,672
451,-693,-375
685,711,-617
-634,259,-743
-751,-611,-648

--- scanner 2 ---
-603,-567,-383
529,-420,881
-785,-565,-381
-28,-3,-5
-818,568,-551
-824,363,-502
508,716,-790
-477,-747,647
-422,746,583
-469,572,507
-462,-725,465
-136,-113,120
-684,-602,-309
429,588,-742
589,-880,-338
572,603,911
632,600,732
-479,781,530
586,561,868
645,-383,881
590,-540,862
602,-866,-282
734,-859,-287
-487,-785,411
399,664,-687
-825,492,-355

--- scanner 3 ---
685,-540,-346
558,649,-782
345,770,731
580,-565,-397
711,724,-790
-476,-596,899
-512,-840,-508
-568,-746,-468
-831,530,708
-706,553,714
403,759,565
-774,431,-320
-80,-103,76
893,-743,494
633,843,-781
-460,-856,-547
-856,498,-396
728,-762,426
-466,-757,819
45,34,148
551,-495,-348
784,-817,575
-813,599,804
-508,-541,838
399,785,683
-812,296,-441

--- scanner 4 ---
-833,419,-685
-649,471,788
714,-553,870
-504,-456,-348
747,564,-709
-448,-384,-461
769,-578,908
17,31,-46
-79,-61,101
-684,378,885
703,552,-696
-542,-357,-380
-581,316,828
-372,-905,779
668,834,803
424,-502,-633
-899,539,-595
-557,-833,738
-703,510,-662
732,398,-707
620,658,854
588,-445,-582
581,649,821
-418,-886,759
582,-618,-633
719,-443,894

--- scanner 5 ---
519,-699,-930
473,-410,415
756,791,465
508,-703,-859
303,-505,389
767,375,-681
785,682,560
-456,-746,-747
786,376,-521
-57,-17,-26
714,466,-556
-582,370,-797
534,-699,-835
-615,345,513
-484,-514,665
327,-353,470
688,787,563
-616,-646,-732
-601,-555,739
-562,446,534
-488,-513,665
-663,429,-808
-466,387,609
-536,-596,-808
-660,390,-728

--- scanner 6 ---
753,-452,-462
-723,856,853
-610,-562,812
-575,-845,-624
448,-380,520
-111,116,120
722,809,544
-761,754,750
-616,-748,-688
368,897,-293
436,-388,542
-781,-625,754
-442,-784,-655
-664,755,842
741,-327,-621
-631,777,-751
800,778,643
277,921,-445
-13,-48,-24
762,676,667
-770,-446,803
-615,708,-541
368,880,-372
580,-385,418
-580,840,-650
697,-480,-599

--- scanner 7 ---
794,761,517
-510,-616,596
-515,569,-319
456,-763,-317
-754,-643,617
730,444,-487
-461,-511,-373
-422,459,511
702,500,-624
-623,-582,594
-38,122,-61
-346,423,614
802,749,495
855,456,-646
-431,625,-388
378,-736,739
-370,654,-281
0,-28,53
532,-752,-493
-469,-422,-307
-349,-431,-349
524,-661,778
-471,389,477
797,617,393
556,-696,702
437,-733,-310

--- scanner 8 ---
366,-727,-920
-607,-861,320
-84,-90,-148
310,389,243
-805,-924,-746
439,-652,-878
-668,-900,513
-877,-832,-832
402,330,267
-23,4,0
-685,394,487
703,561,-694
-577,399,518
799,-373,599
643,-357,590
700,-424,466
-664,-911,333
-491,443,523
527,516,-760
-810,749,-836
343,-716,-813
-774,-911,-757
-663,718,-874
-671,743,-964
575,402,262
574,586,-607

--- scanner 9 ---
-610,939,-577
745,-437,-467
632,-471,-465
-418,974,-569
477,665,864
-725,-543,-256
565,739,908
-580,-284,615
-536,-468,632
-538,-376,677
786,-631,436
906,-622,478
501,-410,-488
782,432,-465
15,-10,12
-587,915,-618
581,408,-397
602,495,-472
-555,463,781
-675,-401,-255
-646,-516,-360
-490,538,819
794,-542,502
-642,505,767
85,168,82
413,726,832

--- scanner 10 ---
-866,-431,363
-787,-475,408
748,-807,308
520,388,-742
-843,-505,-682
632,-817,270
-550,662,747
378,-510,-821
-812,850,-524
542,773,472
513,822,402
-850,729,-389
411,-331,-783
673,380,-817
-861,-464,-766
-498,623,763
278,-419,-835
647,824,447
-42,-30,-33
-121,127,-177
-908,-389,-706
-722,-327,348
698,-841,447
-894,774,-591
-606,702,653
595,389,-936

--- scanner 11 ---
603,-885,752
-493,-637,-640
649,-808,797
758,447,-468
-765,-836,358
-546,737,-807
-723,-913,382
581,478,-445
469,604,509
-598,467,457
649,665,474
637,509,-516
-572,572,488
-133,53,-44
330,-417,-364
426,-474,-374
-805,-830,405
-593,-480,-618
669,651,487
327,-644,-357
569,-750,780
-673,523,584
-37,-131,-22
-575,-580,-662
-539,730,-795
-619,620,-834

--- scanner 12 ---
-630,-522,-566
-572,-620,-567
-363,683,-472
745,472,545
655,-429,473
740,475,367
766,520,420
824,517,-575
-315,692,-446
893,-842,-518
773,-815,-558
-565,-530,714
911,-849,-534
703,430,-496
-479,-625,780
-614,-662,722
-408,577,-518
122,-47,4
-451,718,408
-343,695,393
-564,-689,-530
564,-509,576
666,517,-531
-403,709,578
674,-393,553

--- scanner 13 ---
-646,523,-341
688,-727,903
823,-765,782
-435,-506,735
429,496,-278
506,-823,-336
391,463,-457
-97,6,55
395,758,433
-517,-395,-394
-390,-369,762
-625,430,-275
-430,-393,892
-702,705,679
377,363,-366
-749,552,749
530,-758,-452
-566,-324,-446
-741,406,-352
276,680,442
-573,618,704
621,-809,827
470,605,441
446,-776,-411
-601,-290,-489

--- scanner 14 ---
487,432,-424
-236,867,618
837,644,599
680,744,621
907,-504,-760
-712,-776,-488
-598,787,-397
483,-748,725
-598,658,-375
-19,-107,-36
-668,-881,-396
-675,-625,373
-267,749,733
-706,-724,451
737,662,643
404,514,-401
761,-465,-685
-737,-872,-396
481,472,-377
488,-850,593
491,-726,737
176,48,-56
-568,719,-542
-322,820,603
729,-541,-720
-573,-601,411

--- scanner 15 ---
837,652,469
404,570,-869
-495,-798,-461
395,492,-750
-340,-624,357
-285,-494,428
-495,787,-754
-826,467,514
882,-882,-390
-566,-878,-462
-254,-609,310
-37,-30,-61
719,-584,515
825,-872,-486
788,623,539
-560,-654,-425
655,-889,-387
839,518,514
-404,887,-768
-792,417,375
403,645,-675
-316,754,-716
153,58,-85
-802,533,337
819,-628,533
662,-606,433

--- scanner 16 ---
-365,-825,601
579,616,-693
-372,-492,-561
536,799,546
750,-509,-791
-699,666,813
690,-436,476
483,598,-835
905,-499,-832
-736,614,845
-390,-307,-648
498,727,605
436,705,501
-405,-670,669
755,-540,-818
864,-469,440
-716,899,-772
-21,-19,-31
-658,826,-848
-791,479,796
-604,824,-678
731,-500,379
112,113,87
-308,-763,704
-339,-483,-600
513,564,-805

--- scanner 17 ---
-648,877,692
-641,681,616
928,-622,-787
-314,-397,632
685,442,468
-426,540,-629
-421,-487,586
143,-24,99
-651,-302,-563
-619,-363,-508
576,545,520
468,581,-569
585,-499,346
-661,-382,-724
669,-485,510
908,-680,-835
950,-793,-735
606,490,596
648,518,-598
-647,730,821
637,-411,403
587,571,-644
-452,404,-617
-496,510,-590
-296,-493,563
42,131,-41

--- scanner 18 ---
-796,669,-655
664,-571,-614
753,635,526
810,530,-606
536,-264,411
-84,142,41
511,-501,-567
458,-255,530
23,-11,125
-363,-757,-739
611,-263,605
786,453,-490
853,544,512
720,456,564
-783,578,-588
-339,-698,-831
-832,635,819
-916,-742,890
693,519,-511
-912,706,818
-906,-685,794
-923,-515,893
-688,700,855
598,-526,-438
-866,578,-625
-358,-685,-566

--- scanner 19 ---
787,-541,-764
580,742,-302
-594,689,-647
-403,709,600
732,-510,-731
-355,837,679
17,104,76
-764,-444,-614
-762,-446,-432
586,959,579
572,795,663
-807,-759,760
-458,785,570
396,-490,823
574,719,-427
-643,484,-653
-863,-745,773
-790,613,-654
-836,-481,-513
444,-391,878
498,902,631
484,673,-320
712,-535,-757
346,-517,837
-858,-738,905

--- scanner 20 ---
-723,676,-443
-767,-524,-615
661,495,-893
-803,786,-482
-849,-581,-637
-796,793,-470
-491,517,388
-27,-4,-61
-768,-404,487
524,370,-859
605,715,688
621,-770,-521
-172,101,24
627,446,-823
-546,368,444
-813,-406,621
615,808,735
-749,-424,-659
360,-712,685
-565,436,279
641,720,858
745,-773,-665
351,-596,525
409,-533,696
643,-778,-533
-743,-455,592

--- scanner 21 ---
-63,169,-79
526,762,-393
885,-267,-724
-691,831,-698
-783,570,443
442,706,-462
-326,-441,-723
482,942,403
21,-5,-6
357,908,540
381,677,-355
795,-686,449
-719,887,-561
-423,-482,-787
702,-639,459
844,-422,-714
-725,-636,704
707,-809,423
-786,714,319
433,872,437
-791,582,421
-546,-647,655
871,-417,-683
-844,875,-720
-609,-476,713
-387,-308,-754

--- scanner 22 ---
762,-884,815
-593,480,-449
-694,-877,840
738,-622,-717
320,333,517
496,344,593
653,-873,937
-775,435,585
313,363,498
-736,360,439
-699,400,617
310,674,-408
-583,-889,704
-614,453,-693
-127,29,-13
706,-683,-781
782,-696,-629
-591,-389,-412
745,-834,774
-591,514,-562
34,-142,138
-523,-365,-613
-592,-780,775
-598,-452,-592
352,665,-288
376,585,-400

--- scanner 23 ---
-639,516,498
559,607,-498
545,-703,602
-625,375,619
601,-628,475
-623,376,593
-972,-755,740
331,-576,-789
496,-602,506
448,-649,-816
-136,-1,-77
-596,561,-524
-629,491,-454
-917,-896,773
403,619,492
-40,-132,22
590,551,-427
621,728,-450
-687,478,-488
464,439,527
-574,-716,-611
417,639,505
-575,-609,-726
-948,-818,591
-471,-603,-554
338,-569,-777

--- scanner 24 ---
706,540,-887
-593,-459,281
-658,-739,-830
375,-435,378
409,-296,328
641,504,-743
885,795,665
399,-258,444
-566,590,733
-784,658,-798
149,165,-81
797,847,798
706,833,698
-733,667,-790
635,541,-967
861,-278,-713
916,-349,-583
947,-231,-698
-456,443,770
-821,-742,-790
-633,-559,267
-721,-792,-864
-773,560,-788
-599,514,741
-613,-385,346
15,25,-160

--- scanner 25 ---
570,694,717
585,-959,574
769,732,-671
-734,-514,-771
698,742,638
-877,239,412
422,-608,-684
-847,485,-712
-25,-142,-16
-401,-929,501
-787,-673,-699
37,6,98
-737,-577,-627
730,711,-684
-808,472,-659
431,-805,-711
582,-780,514
-707,369,-731
543,-916,560
-438,-929,617
431,-619,-639
646,639,747
-558,-910,556
-884,234,544
-898,290,557
676,632,-609

--- scanner 26 ---
-788,630,-622
673,404,901
-344,-677,827
485,-888,-432
690,-969,425
842,-945,516
-599,-875,-553
-722,-807,-602
447,700,-468
-694,675,-722
-535,-676,744
-468,-745,861
-716,571,-660
763,-928,516
-644,356,580
83,-165,133
384,-825,-483
-96,-99,46
514,279,889
480,736,-294
511,797,-427
-704,292,505
536,432,845
594,-756,-467
-715,-893,-529
47,20,-5
-650,475,523

--- scanner 27 ---
-392,434,-634
491,-237,724
-330,491,-531
-686,-738,-370
-485,531,-599
-615,-629,888
-655,-605,-309
-656,-779,902
891,540,-322
-719,-564,-406
-672,465,670
781,-570,-592
723,-399,-529
872,560,-368
-6,9,-65
564,411,819
527,-407,719
-848,516,718
-646,-624,861
99,172,-13
517,-360,812
-663,498,631
539,449,764
772,-410,-708
819,581,-507
429,425,769

--- scanner 28 ---
-599,748,-367
-605,741,-442
31,-184,42
529,408,-748
731,-805,438
-903,701,595
-118,-25,-29
464,400,532
-874,-966,714
522,498,533
615,503,-814
-630,715,-422
-650,-839,-758
779,-814,412
686,-699,484
480,540,-756
-715,-965,770
-863,677,465
-858,564,622
643,-840,-442
530,567,496
-812,-984,692
-623,-853,-808
751,-817,-427
-749,-894,-710
691,-831,-612

--- scanner 29 ---
621,336,-774
453,669,448
516,391,-653
482,-697,-435
-611,556,-845
-642,640,-891
582,816,447
456,-579,-431
-475,790,487
-541,-706,370
711,-554,799
-572,-761,337
642,-458,781
134,-66,16
471,-531,-377
-566,-686,344
-715,-568,-419
-777,614,-887
-512,862,588
-788,-493,-377
-811,-504,-484
716,414,-697
3,68,-23
658,620,454
688,-548,674
-477,788,669

--- scanner 30 ---
557,332,854
-664,-663,-409
565,-418,-643
647,-672,767
-644,716,-413
839,771,-619
-404,873,768
687,387,925
-470,849,945
553,-426,-621
-606,818,-310
-589,-790,813
697,-423,-745
691,-772,749
-354,839,907
153,32,128
879,638,-496
672,301,972
917,740,-520
16,-71,39
-653,-484,-360
669,-615,849
-560,-741,743
-493,-600,-351
-547,717,-321
-455,-792,768

--- scanner 31 ---
783,373,325
569,747,-535
-274,-893,-846
-576,418,-709
468,-520,-860
-316,-780,-946
-296,-722,-898
-648,445,409
-555,-585,399
-639,-599,235
-756,481,-680
708,452,379
-637,471,-755
583,675,-593
25,-88,-61
570,493,-548
497,-680,593
-587,-511,292
770,352,286
-618,390,485
515,-584,-850
573,-630,513
558,-530,673
-539,342,357
578,-596,-756

--- scanner 32 ---
-733,501,952
-591,-621,947
654,-409,555
407,338,768
887,-447,-332
-456,-584,889
-769,422,-708
744,564,-520
-506,-557,-363
480,380,693
-622,384,-677
-440,-724,-399
384,445,757
615,651,-545
629,-383,575
26,39,68
-764,512,965
927,-423,-462
623,-376,500
882,-560,-489
-505,-716,881
-836,426,873
568,498,-475
-630,294,-702
-498,-626,-400

--- scanner 33 ---
-445,488,820
-388,-540,721
545,-622,881
863,804,-446
633,931,832
-843,-408,-556
737,-724,-511
-850,-333,-562
882,726,-349
493,-534,938
-52,-1,4
54,188,-26
-779,499,-298
-406,-636,652
-407,609,955
-666,656,-303
751,-774,-538
-817,-388,-531
715,737,821
-803,629,-258
761,881,844
577,-548,774
-363,564,753
-513,-546,698
864,748,-287
792,-676,-412

--- scanner 34 ---
-598,-573,-714
679,-407,-450
769,-782,513
794,672,-515
690,-543,-306
-729,841,-584
799,-600,451
-74,117,181
902,-730,472
-481,-680,732
-475,-622,-646
-409,-642,791
-547,503,636
832,883,920
685,586,-471
-553,560,517
-853,807,-516
740,-468,-306
725,946,826
-493,485,453
-482,-549,-732
-503,-742,836
731,750,858
-662,724,-515
813,684,-540
93,49,73

--- scanner 35 ---
506,-491,519
-829,637,754
500,-460,-732
-851,467,-882
758,481,315
-818,471,696
446,750,-555
400,-617,-710
-519,-454,-976
436,-442,548
-674,498,-905
-423,-397,-986
482,-560,-688
-902,-875,466
481,-440,414
-3,33,-5
-708,-876,541
684,400,206
-783,-884,388
-730,529,-834
-74,-97,-162
-844,589,700
526,640,-516
-420,-624,-993
703,332,371
453,757,-543

--- scanner 36 ---
34,-23,16
339,576,633
684,-552,-812
-777,575,-749
-958,608,616
-89,81,100
-656,-290,-658
321,535,717
-565,-285,-851
-793,506,-610
370,-779,475
-951,674,434
395,546,-457
576,-631,-702
-900,668,667
460,398,-397
-667,-295,-799
332,-658,340
632,-591,-796
316,502,-412
288,-703,542
-790,-530,474
274,460,657
-833,470,-815
-708,-336,463
-836,-386,451

--- scanner 37 ---
554,768,437
-555,513,-625
455,-560,-499
-541,-921,835
720,826,426
-793,613,547
-530,600,-496
-299,-361,-797
-371,-904,736
404,-693,-400
-314,-914,832
672,772,411
550,-810,404
-792,538,353
683,784,-760
105,-64,1
-485,666,-672
581,-833,581
388,-684,-556
-358,-337,-889
612,-762,525
747,719,-856
758,826,-833
-801,460,472
-371,-356,-624

--- scanner 38 ---
438,880,-534
612,654,778
-16,54,96
556,-825,836
-440,559,584
-692,-503,-666
326,-698,-442
-389,666,-460
-451,-407,630
325,-642,-283
452,830,-507
-501,709,504
-413,662,-486
428,-775,848
-318,662,-471
474,-631,825
-440,-466,711
-727,-413,-738
-567,-412,-719
696,640,942
-516,609,664
644,728,885
80,-81,-9
-520,-427,708
307,-620,-345
397,782,-408
`
)

func main() {
	fn := util.WithProfiling()
	defer fn()

	allRotations = calcAllRotations()

	var scanners []Scanner
	for i, sc := range util.ReadInput(in, "\n\n") {
		var scans []maps.Coordinate3D
		for _, s := range strings.Split(sc, "\n")[1:] {
			scans = append(scans, maps.NewCoordinate3D(s))
		}
		scanners = append(scanners, Scanner{Index: i, Scans: scans})
	}

	f, s := solve(scanners)

	fmt.Printf("first %d\n", f)
	fmt.Printf("second %d\n", s)
}

type Scanner struct {
	Index int
	Scans []maps.Coordinate3D
}

func (s Scanner) String() string {
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("--- scanner %d ---\n", s.Index))

	for _, scan := range s.Scans {
		sb.WriteString(scan.String() + "\n")
	}

	return sb.String()
}

type coordTuple struct {
	from maps.Coordinate3D
	to   maps.Coordinate3D
}

func solve(scanners []Scanner) (int, int) {
	diffs := make(map[int]map[maps.Coordinate3D]coordTuple)
	for si, scanner := range scanners {
		diffs[si] = make(map[maps.Coordinate3D]coordTuple)
		for i, scans1 := range scanner.Scans {
			for j, scans2 := range scanner.Scans {
				if i >= j {
					continue
				}
				diffs[si][scans1.Diff(scans2)] = coordTuple{
					from: scans1,
					to:   scans2,
				}
			}
		}
	}

	composite := make(map[maps.Coordinate3D]struct{})
	for _, scan := range scanners[0].Scans {
		composite[scan] = struct{}{}
	}

	l := toList(composite)
	compositeDiffs := findDiffVectors(l, l)

	distances := make(map[int]maps.Coordinate3D)
	distances[0] = maps.Coordinate3D{}
	for len(distances) < len(scanners) {
		for i := range scanners {
			if _, ok := distances[i]; !ok {
				continue
			}

			for j := range scanners {
				if _, ok := distances[j]; ok {
					continue
				}

				scanDiffs2 := findDiffVectors(scanners[j].Scans, scanners[j].Scans)
				matchings := findMatching(compositeDiffs, scanDiffs2)
				if len(matchings) == 0 {
					continue
				}

				matches := matchup(matchings)
				dis, r := distance(matches)
				if r == nil {
					continue
				}

				distances[j] = dis
				for _, scan := range scanners[j].Scans {
					composite[r.Apply(scan).Add(dis)] = struct{}{}
				}
				for diff, val := range scanDiffs2 {
					compositeDiffs[diff] = coordTuple{
						from: r.Apply(val.from).Add(dis),
						to:   r.Apply(val.to).Add(dis),
					}
				}
			}
		}
	}

	var maxDistance int
	for i, d1 := range distances {
		for j, d2 := range distances {
			if i >= j {
				continue
			}

			dis := d1.ManhattanDistance(d2)
			if dis > maxDistance {
				maxDistance = dis
			}
		}
	}

	return len(composite), maxDistance
}

func toList(coords map[maps.Coordinate3D]struct{}) []maps.Coordinate3D {
	l := make([]maps.Coordinate3D, len(coords))
	var i int
	for k := range coords {
		l[i] = k
		i += 1
	}

	return l
}

func findDiffVectors(scans1, scans2 []maps.Coordinate3D) map[maps.Coordinate3D]coordTuple {
	diffs := make(map[maps.Coordinate3D]coordTuple)
	for _, c1 := range scans1 {
		for _, c2 := range scans2 {
			for _, r := range allRotations {
				diffs[r.Apply(c1).Diff(r.Apply(c2))] = coordTuple{
					from: c1,
					to:   c2,
				}
			}
		}
	}

	delete(diffs, maps.Coordinate3D{})
	return diffs
}

func matchup(matchings map[maps.Coordinate3D]map[maps.Coordinate3D]int) map[maps.Coordinate3D]maps.Coordinate3D {
	matches := make(map[maps.Coordinate3D]maps.Coordinate3D)
	for k, v := range matchings {
		var matched maps.Coordinate3D
		var matchCount int

		for c, count := range v {
			if count > matchCount {
				matchCount = count
				matched = c
			}
		}

		matches[k] = matched
	}

	return matches
}

func findMatching(scanDiffs1, scanDiffs2 map[maps.Coordinate3D]coordTuple) map[maps.Coordinate3D]map[maps.Coordinate3D]int {
	matchings := make(map[maps.Coordinate3D]map[maps.Coordinate3D]int)
	for diff := range scanDiffs1 {
		t1 := scanDiffs1[diff]
		t2, ok := scanDiffs2[diff]
		if !ok {
			continue
		}

		if m, ok := matchings[t1.to]; ok {
			m[t2.to] += 1
			m[t2.from] += 1
		} else {
			matchings[t1.to] = map[maps.Coordinate3D]int{
				t2.to:   1,
				t2.from: 1,
			}
		}

		if m, ok := matchings[t1.from]; ok {
			m[t2.to] += 1
			m[t2.from] += 1
		} else {
			matchings[t1.from] = map[maps.Coordinate3D]int{
				t2.to:   1,
				t2.from: 1,
			}
		}
	}

	return matchings
}

func distance(matches map[maps.Coordinate3D]maps.Coordinate3D) (maps.Coordinate3D, maps.Rotation3D) {
	for _, r := range allRotations {
		// also move the values
		counts := make(map[maps.Coordinate3D]int)
		for k, m := range matches {
			c := k.Sub(r.Apply(m))
			counts[c] += 1
		}

		var maxCount int
		var maxCoord maps.Coordinate3D
		for coord, c := range counts {
			if c > maxCount {
				maxCount = c
				maxCoord = coord
			}
		}

		if maxCount >= 12 {
			return maxCoord, r
		}
	}

	return maps.Coordinate3D{}, nil
}

var allRotations []maps.Rotation3D

func calcAllRotations() []maps.Rotation3D {
	var directions []maps.RotationDirection
	for _, x := range []bool{false, true} {
		for _, y := range []bool{false, true} {
			for _, z := range []bool{false, true} {
				directions = append(directions, maps.RotationDirection{
					X: x,
					Y: y,
					Z: z,
				})
			}
		}
	}

	var rotations []maps.Rotation3D
	for _, d := range directions {
		rotations = append(rotations, d)

		for _, x := range []string{"x", "y", "z"} {
			for _, y := range []string{"x", "y", "z"} {
				for _, z := range []string{"x", "y", "z"} {
					if x == y || y == z || x == z {
						continue
					}

					rotations = append(rotations, maps.RotationFacing{
						X:         x,
						Y:         y,
						Z:         z,
						Direction: d,
					})
				}
			}
		}
	}

	return rotations
}
